//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input System/Movimientos.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Movimientos: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Movimientos()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Movimientos"",
    ""maps"": [
        {
            ""name"": ""Desplazamiento"",
            ""id"": ""d1b53061-46f4-4bfc-bed5-f4b9fae0bfb1"",
            ""actions"": [
                {
                    ""name"": ""Saltar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""283b7932-60d0-4ee9-875f-edad7db9cc1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovDerecha"",
                    ""type"": ""PassThrough"",
                    ""id"": ""93c81d65-3649-427d-a08c-9c0ab29bc078"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovIzquierda"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c6769438-39b0-471a-8e6f-24c5e55134fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Frenar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4212b2fb-127d-40f2-8ccc-8c06b27a5f8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Atacar"",
                    ""type"": ""Button"",
                    ""id"": ""60b0dd1e-0ecc-4117-a0c4-af63a540e6a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a68b8785-76fa-456f-8eb5-3343fe9bf69b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovDerecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e04ee855-8d14-46d6-a795-6084f08e460b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovIzquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9177003e-658a-4001-9017-b0d00c6b1bfe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Saltar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dd922ad-49d7-40f7-8a5a-fd1886237117"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Frenar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4db3041-6db1-481a-a1fd-d423c57bf2c4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atacar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Desplazamiento
        m_Desplazamiento = asset.FindActionMap("Desplazamiento", throwIfNotFound: true);
        m_Desplazamiento_Saltar = m_Desplazamiento.FindAction("Saltar", throwIfNotFound: true);
        m_Desplazamiento_MovDerecha = m_Desplazamiento.FindAction("MovDerecha", throwIfNotFound: true);
        m_Desplazamiento_MovIzquierda = m_Desplazamiento.FindAction("MovIzquierda", throwIfNotFound: true);
        m_Desplazamiento_Frenar = m_Desplazamiento.FindAction("Frenar", throwIfNotFound: true);
        m_Desplazamiento_Atacar = m_Desplazamiento.FindAction("Atacar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Desplazamiento
    private readonly InputActionMap m_Desplazamiento;
    private List<IDesplazamientoActions> m_DesplazamientoActionsCallbackInterfaces = new List<IDesplazamientoActions>();
    private readonly InputAction m_Desplazamiento_Saltar;
    private readonly InputAction m_Desplazamiento_MovDerecha;
    private readonly InputAction m_Desplazamiento_MovIzquierda;
    private readonly InputAction m_Desplazamiento_Frenar;
    private readonly InputAction m_Desplazamiento_Atacar;
    public struct DesplazamientoActions
    {
        private @Movimientos m_Wrapper;
        public DesplazamientoActions(@Movimientos wrapper) { m_Wrapper = wrapper; }
        public InputAction @Saltar => m_Wrapper.m_Desplazamiento_Saltar;
        public InputAction @MovDerecha => m_Wrapper.m_Desplazamiento_MovDerecha;
        public InputAction @MovIzquierda => m_Wrapper.m_Desplazamiento_MovIzquierda;
        public InputAction @Frenar => m_Wrapper.m_Desplazamiento_Frenar;
        public InputAction @Atacar => m_Wrapper.m_Desplazamiento_Atacar;
        public InputActionMap Get() { return m_Wrapper.m_Desplazamiento; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DesplazamientoActions set) { return set.Get(); }
        public void AddCallbacks(IDesplazamientoActions instance)
        {
            if (instance == null || m_Wrapper.m_DesplazamientoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DesplazamientoActionsCallbackInterfaces.Add(instance);
            @Saltar.started += instance.OnSaltar;
            @Saltar.performed += instance.OnSaltar;
            @Saltar.canceled += instance.OnSaltar;
            @MovDerecha.started += instance.OnMovDerecha;
            @MovDerecha.performed += instance.OnMovDerecha;
            @MovDerecha.canceled += instance.OnMovDerecha;
            @MovIzquierda.started += instance.OnMovIzquierda;
            @MovIzquierda.performed += instance.OnMovIzquierda;
            @MovIzquierda.canceled += instance.OnMovIzquierda;
            @Frenar.started += instance.OnFrenar;
            @Frenar.performed += instance.OnFrenar;
            @Frenar.canceled += instance.OnFrenar;
            @Atacar.started += instance.OnAtacar;
            @Atacar.performed += instance.OnAtacar;
            @Atacar.canceled += instance.OnAtacar;
        }

        private void UnregisterCallbacks(IDesplazamientoActions instance)
        {
            @Saltar.started -= instance.OnSaltar;
            @Saltar.performed -= instance.OnSaltar;
            @Saltar.canceled -= instance.OnSaltar;
            @MovDerecha.started -= instance.OnMovDerecha;
            @MovDerecha.performed -= instance.OnMovDerecha;
            @MovDerecha.canceled -= instance.OnMovDerecha;
            @MovIzquierda.started -= instance.OnMovIzquierda;
            @MovIzquierda.performed -= instance.OnMovIzquierda;
            @MovIzquierda.canceled -= instance.OnMovIzquierda;
            @Frenar.started -= instance.OnFrenar;
            @Frenar.performed -= instance.OnFrenar;
            @Frenar.canceled -= instance.OnFrenar;
            @Atacar.started -= instance.OnAtacar;
            @Atacar.performed -= instance.OnAtacar;
            @Atacar.canceled -= instance.OnAtacar;
        }

        public void RemoveCallbacks(IDesplazamientoActions instance)
        {
            if (m_Wrapper.m_DesplazamientoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDesplazamientoActions instance)
        {
            foreach (var item in m_Wrapper.m_DesplazamientoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DesplazamientoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DesplazamientoActions @Desplazamiento => new DesplazamientoActions(this);
    public interface IDesplazamientoActions
    {
        void OnSaltar(InputAction.CallbackContext context);
        void OnMovDerecha(InputAction.CallbackContext context);
        void OnMovIzquierda(InputAction.CallbackContext context);
        void OnFrenar(InputAction.CallbackContext context);
        void OnAtacar(InputAction.CallbackContext context);
    }
}
